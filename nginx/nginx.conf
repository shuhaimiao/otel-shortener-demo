events {
    worker_connections 1024;
}

http {
    # Logging format to include trace information
    log_format trace '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" "$http_traceparent"';

    access_log /var/log/nginx/access.log trace;
    error_log /var/log/nginx/error.log warn;

    # Simple rate limiting
    limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
    
    # Upstream configuration for BFF
    upstream bff_backend {
        server bff:3001;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # Health check endpoint
        location /health {
            access_log off;
            add_header Content-Type text/plain;
            return 200 "healthy\n";
        }
        
        # Static files (if needed)
        location /static/ {
            root /usr/share/nginx/html;
            expires 1h;
            add_header Cache-Control "public, max-age=3600";
        }
        
        # API routes - proxy to BFF
        location /api/ {
            # Rate limiting
            limit_req zone=api_limit burst=5 nodelay;
            limit_req_status 429;
            
            # If no traceparent, generate one (simplified - normally done by OTel module)
            set $trace_id $request_id;
            
            # Proxy settings
            proxy_pass http://bff_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass trace headers
            proxy_set_header traceparent $http_traceparent;
            proxy_set_header tracestate $http_tracestate;
            
            # If traceparent is missing, add a simple one based on request_id
            # Note: This is a simplified fallback - proper OTel module would generate valid W3C format
            proxy_set_header X-Request-ID $trace_id;
            
            # Timeouts
            proxy_connect_timeout 30s;
            proxy_send_timeout 30s;
            proxy_read_timeout 30s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
        }
        
        # Root path - could serve SPA or redirect
        location / {
            # For now, just return a simple message
            add_header Content-Type text/html;
            return 200 '<html><body><h1>NGINX Edge Layer</h1><p>Use /api/* for API requests</p></body></html>';
        }
    }
}